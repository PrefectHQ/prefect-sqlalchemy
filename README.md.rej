diff a/README.md b/README.md	(rejected hunks)
@@ -1,6 +1,8 @@
 # prefect-sqlalchemy
 
 <p align="center">
+    <!--- Insert a cover image here -->
+    <!--- <br> -->
     <a href="https://pypi.python.org/pypi/prefect-sqlalchemy/" alt="PyPI version">
         <img alt="PyPI" src="https://img.shields.io/pypi/v/prefect-sqlalchemy?color=0052FF&labelColor=090422"></a>
     <a href="https://github.com/PrefectHQ/prefect-sqlalchemy/" alt="Stars">
@@ -16,19 +18,26 @@
         <img src="https://img.shields.io/badge/discourse-browse_forum-red.svg?color=0052FF&labelColor=090422&logo=discourse" /></a>
 </p>
 
-## Welcome!
+Visit the full docs [here](https://PrefectHQ.github.io/prefect-sqlalchemy) to see additional examples and the API reference.
 
 Prefect integrations for interacting with SQLAlchemy.
 
-## Getting Started
 
-### Python setup
+<!--- ### Add a real-world example of how to use this Collection here
 
-Requires an installation of Python 3.7+.
+Offer some motivation on why this helps.
 
-We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.
+After installing `prefect-sqlalchemy` and [saving the credentials](#saving-credentials-to-block), you can easily use it within your flows to help you achieve the aforementioned benefits!
 
-These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the [Prefect documentation](https://orion-docs.prefect.io/).
+```python
+from prefect import flow, get_run_logger
+```
+
+--->
+
+## Resources
+
+For more tips on how to use tasks and flows in a Collection, check out [Using Collections](https://orion-docs.prefect.io/collections/usage/)!
 
 ### Installation
 
@@ -38,36 +47,38 @@ Install `prefect-sqlalchemy` with `pip`:
 pip install prefect-sqlalchemy
 ```
 
-A list of available blocks in `prefect-sqlalchemy` and their setup instructions can be found [here](https://PrefectHQ.github.io/prefect-sqlalchemy/#blocks-catalog).
+A list of available blocks in `prefect-sqlalchemy` and their setup instructions can be found [here](https://PrefectHQ.github.io/prefect-sqlalchemy/blocks-catalog).
+
+Requires an installation of Python 3.7+.
+
+We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.
+
+These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the [Prefect documentation](https://orion-docs.prefect.io/).
+
+<!--- ### Saving credentials to block
+
+Replace this with actual instructions on how to get API key or token.
 
-### Write and run a flow
+1. Head over to 
+2. Login to your SERVICE account
+3. Click "+ Create new secret key"
+4. Copy the generated API key
+5. Create a short script, replacing the placeholders (or do so in the UI)
 
 ```python
-from prefect import flow
-from prefect_sqlalchemy.tasks import (
-    goodbye_prefect_sqlalchemy,
-    hello_prefect_sqlalchemy,
-)
-
-# Use `with_options` to customize options on any existing task or flow
-
-custom_goodbye_prefect_sqlalchemy = goodbye_prefect_sqlalchemy.with_options(
-    name="My custom task name",
-    retries=2,
-    retry_delay_seconds=10,
-)
-
-@flow
-def example_flow():
-    hello_prefect_sqlalchemy
-    custom_goodbye_prefect_sqlalchemy
-
-example_flow()
+from prefect_sqlalchemy import Block`
+Block(api_key="API_KEY_PLACEHOLDER").save("BLOCK_NAME_PLACEHOLDER")
 ```
 
-For more tips on how to use tasks and flows in a Collection, check out [Using Collections](https://orion-docs.prefect.io/collections/usage/)!
+Congrats! You can now easily load the saved block, which holds your credentials:
 
-## Resources
+```python
+from prefect_sqlalchemy import Block
+Block.load("BLOCK_NAME_PLACEHOLDER")
+```
+--->
+
+### Feedback
 
 If you encounter any bugs while using `prefect-sqlalchemy`, feel free to open an issue in the [prefect-sqlalchemy](https://github.com/PrefectHQ/prefect-sqlalchemy) repository.
 
